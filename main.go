package main

import (
	"context"
	"log/slog"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/disgoorg/disgo"
	"github.com/disgoorg/disgo/bot"
	"github.com/disgoorg/disgo/discord"
	"github.com/disgoorg/disgo/handler"
	"github.com/disgoorg/disgo/handler/middleware"
	"github.com/disgoorg/snowflake/v2"
	"github.com/joho/godotenv"
)

func main() {
	err := godotenv.Load()
	if err != nil {
		slog.Error("failed to load .env")
	}

	slog.Info("starting bkseg-bot...")
	slog.Info("disgo version", slog.String("version", disgo.Version))

	r := handler.New()
	r.Use(middleware.Logger)
	r.Group(func(r handler.Router) {
		r.Use(middleware.Print("group1"))
		r.Route("/test", func(r handler.Router) {
			r.Command("/sub2", handleContent("/test/sub2"))
			r.Route("/{group}", func(r handler.Router) {
				r.Command("/sub", handleVariableContent)
			})
		})
	})
	r.Group(func(r handler.Router) {
		r.Use(middleware.Print("group2"))
		r.Command("/ping", handlePing)
		r.Command("/ping2", handleContent("pong2"))
		r.Component("/button1/{data}", handleComponent)
	})
	r.Group(func(router handler.Router) {
		r.Use(middleware.Print("test2 cmd"))
		r.Command("/test2", handleTest2)
	})
	r.NotFound(handleNotFound)

	token := os.Getenv("BOT_TOKEN")
	guildID := snowflake.GetEnv("GUILD_ID")

	client, err := disgo.New(token,
		bot.WithDefaultGateway(),
		bot.WithEventListeners(r),
	)
	if err != nil {
		slog.Error("error while building bot", slog.Any("err", err))
		return
	}

	if err = handler.SyncCommands(client, commands, []snowflake.ID{guildID}); err != nil {
		slog.Error("error while syncing commands", slog.Any("err", err))
		return
	}

	defer client.Close(context.TODO())

	if err = client.OpenGateway(context.TODO()); err != nil {
		slog.Error("error while connecting to gateway", slog.Any("err", err))
	}

	slog.Info("bkseg-bot is now running. Press CTRL-C to exit.")
	s := make(chan os.Signal, 1)
	signal.Notify(s, syscall.SIGINT, syscall.SIGTERM, os.Interrupt)
	<-s
}

func handleContent(content string) handler.CommandHandler {
	return func(event *handler.CommandEvent) error {
		return event.CreateMessage(discord.MessageCreate{Content: content})
	}
}

func handleVariableContent(event *handler.CommandEvent) error {
	group := event.Vars["group"]
	return event.CreateMessage(discord.MessageCreate{Content: "group: " + group})
}

func handlePing(event *handler.CommandEvent) error {
	return event.CreateMessage(discord.MessageCreate{
		Content: "pong",
		Components: []discord.ContainerComponent{
			discord.ActionRowComponent{
				discord.NewPrimaryButton("button1", "/button1/testData"),
			},
		},
	})
}

func handleComponent(event *handler.ComponentEvent) error {
	data := event.Vars["data"]
	return event.CreateMessage(discord.MessageCreate{Content: "component: " + data})
}

func handleTest2(event *handler.CommandEvent) error {
	dataStr := event.SlashCommandInteractionData().Int("int-option")
	slog.Info("got int from test2", "data", dataStr)
	embed := discord.NewEmbedBuilder().
		// Basic information
		SetTitle(":sparkles: Beautiful Embed Example").
		SetDescription("This is a **fancy** embed with multiple features!\nWelcome to the demonstration.").
		SetURL("https://trungtqt.com").

		// Color
		SetColor(0x3498db).

		// Author
		SetAuthor("Grok", "https://example.com", "https://abs.twimg.com/favicons/twitter.3.ico").

		// Fields (content inside embeds)
		AddField("Feature 1", "Supports **markdown** and emojis :smile:", true).
		AddField("Feature 2", "Inline fields look great together", true).
		AddField("Statistics", "```go\nLines: 100\nUsers: 500\n```", false).

		// Image
		SetThumbnail("https://abs.twimg.com/favicons/twitter.3.ico").
		SetImage("https://media.discordapp.net/attachments/1348612156349747213/1349040615190696028/Banner-StartTrain.png?ex=67d1a77a&is=67d055fa&hm=d3bb47d6d0cd2f8d5a6ab7e4724a5c47badf38b854a0d53969f4ec3ab59a84c1&=&format=webp&quality=lossless&width=2500&height=670").

		// Footer
		SetFooter("Generated by Grok", "https://abs.twimg.com/favicons/twitter.3.ico").

		// Timestamp
		SetTimestamp(time.Now()).
		Build()
	return event.CreateMessage(discord.MessageCreate{
		Embeds: []discord.Embed{
			embed,
		},
	})

}

func handleNotFound(event *handler.InteractionEvent) error {
	return event.CreateMessage(discord.MessageCreate{Content: "not found"})
}
